(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{222:function(t,s,e){"use strict";e.r(s);var a=e(4),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"truth-equality-and-javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#truth-equality-and-javascript"}},[t._v("#")]),t._v(" Truth, Equality and JavaScript")]),t._v(" "),e("p",[t._v("You don’t have to be a JavaScript novice to get confused by this…")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("or this…")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'potato'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'potato'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'potato'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The good news is that there is a standard and all browsers follow it. Some authors will tell you to fear coercion and and code against it. I hope to persuade you that coercion is a feature to be leveraged (or at the very least understood), not avoided…")]),t._v(" "),e("p",[t._v("Is x true? Does x equal y? Questions of truth and equality at the kernel of three major areas of JavaScript: conditional statements and operators (if, ternaries, &&, || etc.), the equals operator (==), and the strict equals operator (===). Lets see what happens in each case…")]),t._v(" "),e("p",[e("strong",[t._v("Conditionals")])]),t._v(" "),e("p",[t._v("In JavaScript, all conditional statements and operators follow the same coercion paradigm. We’ll use the "),e("code",[t._v("if")]),t._v(" statement by way of example.")]),t._v(" "),e("p",[t._v("The construct "),e("code",[t._v("if")]),t._v(" ( "),e("em",[t._v("Expression")]),t._v(" ) "),e("em",[t._v("Statement")]),t._v(" will coerce the result of evaluating the "),e("em",[t._v("Expression")]),t._v(" to a boolean using the abstract method "),e("strong",[t._v("ToBoolean")]),t._v(" for which the "),e("a",{attrs:{href:"http://ecma262-5.com/ELS5_HTML.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES5 spec"),e("OutboundLink")],1),t._v(" defines the following algorithm:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Argument Type")]),t._v(" "),e("th",[t._v("Result")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Undefined")]),t._v(" "),e("td",[e("strong",[t._v("false")])])]),t._v(" "),e("tr",[e("td",[t._v("Null")]),t._v(" "),e("td",[e("strong",[t._v("false")])])]),t._v(" "),e("tr",[e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("The result equals the input argument (no conversion).")])]),t._v(" "),e("tr",[e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("The result is "),e("strong",[t._v("false")]),t._v(" if the argument is "),e("strong",[t._v("+0")]),t._v(", "),e("strong",[t._v("−0")]),t._v(", or "),e("strong",[t._v("NaN")]),t._v("; otherwise the result is "),e("strong",[t._v("true")]),t._v(".")])]),t._v(" "),e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",[t._v("The result is "),e("strong",[t._v("false")]),t._v(" if the argument is the empty String (its length is zero); otherwise the result is "),e("strong",[t._v("true")]),t._v(".")])]),t._v(" "),e("tr",[e("td",[t._v("Object")]),t._v(" "),e("td",[e("strong",[t._v("true")]),t._v(".")])])])]),t._v(" "),e("p",[t._v("This is the formula JavaScript uses to classify values as "),e("em",[t._v("truthy")]),t._v(" ("),e("code",[t._v("true")]),t._v(", "),e("code",[t._v('"potato"')]),t._v(", "),e("code",[t._v("36")]),t._v(", "),e("code",[t._v("[1,2,4]")]),t._v(" and "),e("code",[t._v("{a:16}")]),t._v(") or "),e("em",[t._v("falsey")]),t._v(" ("),e("code",[t._v("false")]),t._v(", "),e("code",[t._v("0")]),t._v(", "),e("code",[t._v('""')]),t._v(", "),e("code",[t._v("null")]),t._v(" and "),e("code",[t._v("undefined")]),t._v(").")]),t._v(" "),e("p",[t._v("Now we can see why, in the introductory example, "),e("code",[t._v("if ([0])")]),t._v(" allows entry to the subsequent block: an array is an object and all objects coerce to "),e("code",[t._v("true")]),t._v(".")]),t._v(" "),e("p",[t._v("Here’s a few more examples. Some results may be surprising but they always adhere to the simple rules specified above:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("trutheyTester")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("expr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" expr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'truthey'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'falsey'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trutheyTester")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//truthey (an object is always true)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trutheyTester")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//falsey")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trutheyTester")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//truthey (an object!)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trutheyTester")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//falsey")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trutheyTester")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//truthey (an object!)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trutheyTester")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//falsey")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trutheyTester")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//truthey (an object!)")]),t._v("\n")])])]),e("p",[e("strong",[t._v("The Equals Operator (==)")])]),t._v(" "),e("p",[t._v("The == version of equality is quite liberal. Values may be considered equal even if they are different types, since the operator will force coercion of one or both operators into a single type (usually a number) before performing a comparison. Many developers find this a little scary, no doubt egged on by at least one well-known JavaScript guru who recommends avoiding the == operator altogether.")]),t._v(" "),e("p",[t._v("The avoidance strategy bothers me because you can’t master a language until you know it inside out – and fear and evasion are the enemies of knowledge. Moreover pretending == does not exist will not let you off the hook when it comes to understanding coercion because in JavaScript coercion is everywhere! Its in conditional expressions (as we’ve just seen), its in array indexing, its in concatenation and more. What’s more coercion, when used safely, can be an instrument of concise, elegant and readable code.")]),t._v(" "),e("p",[t._v("Anyway, rant over, lets take a look at the way ECMA defines how == works. Its really not so intimidating. Just remember that "),e("code",[t._v("undefined")]),t._v(" and "),e("code",[t._v("null")]),t._v(" equal each other (and nothing else) and most other types get coerced to a number to facilitate comparison:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Type(x)")]),t._v(" "),e("th",[t._v("Type(y)")]),t._v(" "),e("th",[t._v("Result")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("x and y are the same type")]),t._v(" "),e("td",[e("strong",[t._v("See Strict Equality (===) Algorithm")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("null")]),t._v(" "),e("td",[t._v("Undefined")]),t._v(" "),e("td",[e("strong",[t._v("true")])])]),t._v(" "),e("tr",[e("td",[t._v("Undefined")]),t._v(" "),e("td",[t._v("null")]),t._v(" "),e("td",[e("strong",[t._v("true")])])]),t._v(" "),e("tr",[e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("x == toNumber(y)")])]),t._v(" "),e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("toNumber(x) == y")])]),t._v(" "),e("tr",[e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("(any)")]),t._v(" "),e("td",[t._v("toNumber(x) == y")])]),t._v(" "),e("tr",[e("td",[t._v("(any)")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("x == toNumber(y)")])]),t._v(" "),e("tr",[e("td",[t._v("String or Number")]),t._v(" "),e("td",[t._v("Object")]),t._v(" "),e("td",[t._v("x == toPrimitive(y)")])]),t._v(" "),e("tr",[e("td",[t._v("Object")]),t._v(" "),e("td",[t._v("String or Number")]),t._v(" "),e("td",[t._v("toPrimitive(x) == y")])]),t._v(" "),e("tr",[e("td",[t._v("otherwise…")]),t._v(" "),e("td",[e("strong",[t._v("false")])]),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("Where the result is an expression the algorithm is reapplied until the result is a boolean. toNumber and toPrimitive are internal methods which convert their arguments according to the following rules:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Argument Type")]),t._v(" "),e("th",[t._v("Result")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Undefined")]),t._v(" "),e("td",[e("strong",[t._v("NaN")])])]),t._v(" "),e("tr",[e("td",[t._v("Null")]),t._v(" "),e("td",[e("strong",[t._v("+0")])])]),t._v(" "),e("tr",[e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("The result is "),e("strong",[t._v("1")]),t._v(" if the argument is "),e("strong",[t._v("true")]),t._v(". The result is "),e("strong",[t._v("+0")]),t._v(" if the argument is false.")])]),t._v(" "),e("tr",[e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("The result equals the input argument (no conversion).")])]),t._v(" "),e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",[t._v("In effect evaluates Number("),e("em",[t._v("string")]),t._v(") “abc” -> NaN “123” -> 123")])]),t._v(" "),e("tr",[e("td",[t._v("Object")]),t._v(" "),e("td",[t._v("Apply the following steps:1. Let "),e("em",[t._v("primValue")]),t._v(" be ToPrimitive("),e("em",[t._v("input argument")]),t._v(", hint Number). 2. Return ToNumber("),e("em",[t._v("primValue")]),t._v(").")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Argument Type")]),t._v(" "),e("th",[t._v("Result")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Object")]),t._v(" "),e("td",[t._v("(in the case of equality operator coercion) if "),e("code",[t._v("valueOf")]),t._v(" returns a primitive, return it. Otherwise if "),e("code",[t._v("toString")]),t._v(" returns a primitive return it. Otherwise throw an error")])]),t._v(" "),e("tr",[e("td",[t._v("otherwise…")]),t._v(" "),e("td",[t._v("The result equals the input argument (no conversion).")])])])]),t._v(" "),e("p",[t._v("Here are some examples – I’ll use pseudo code to demonstrate step-by-step how the coercion algorithm is applied:")]),t._v(" "),e("p",[e("strong",[t._v("[0] == true;")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//EQUALITY CHECK...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//HOW IT WORKS...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert boolean using toNumber")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert object using toPrimitive")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[0].valueOf() is not a primitive so use...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//[0].toString() -> "0"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert string using toNumber")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false!")]),t._v("\n")])])]),e("p",[e("strong",[t._v("“potato” == true;")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//EQUALITY CHECK...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'potato'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//HOW IT WORKS...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert boolean using toNumber")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'potato'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert string using toNumber")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false!")]),t._v("\n")])])]),e("p",[e("strong",[t._v("“potato” == false;")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//EQUALITY CHECK...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'potato'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//HOW IT WORKS...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert boolean using toNumber")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'potato'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert string using toNumber")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false!")]),t._v("\n")])])]),e("p",[e("strong",[t._v("object with valueOf")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//EQUALITY CHECK...")]),t._v("\ncrazyNumeric "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncrazyNumeric"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncrazyNumeric "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//HOW IT WORKS...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert object using toPrimitive")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//valueOf returns a primitive so use it")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true!")]),t._v("\n")])])]),e("h2",{attrs:{id:"object-with-tostring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-with-tostring"}},[t._v("#")]),t._v(" object with toString")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//EQUALITY CHECK...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" crazyObj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncrazyObj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//HOW IT WORKS...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert object using toPrimitive")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//valueOf returns an object so use toString")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//convert string using toNumber")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false!")]),t._v("\n")])])]),e("h2",{attrs:{id:"the-strict-equals-operator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-strict-equals-operator"}},[t._v("#")]),t._v(" The Strict Equals Operator (===)")]),t._v(" "),e("p",[t._v("This one’s easy. If the operands are of different types the answer is always false. If they are of the same type an intuitive equality test is applied: object identifiers must reference the same object, strings must contain identical character sets, other primitives must share the same value. "),e("code",[t._v("NaN")]),t._v(", "),e("code",[t._v("null")]),t._v(" and "),e("code",[t._v("undefined")]),t._v(" will never === another type. "),e("code",[t._v("NaN")]),t._v(" does not even === itself.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Type(x)")]),t._v(" "),e("th",[t._v("Values")]),t._v(" "),e("th",[t._v("Result")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Type(x) different from Type(y)")]),t._v(" "),e("td",[e("strong",[t._v("false")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("Undefined or Null")]),t._v(" "),e("td",[e("strong",[t._v("true")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("x same value as y (but not "),e("code",[t._v("NaN")]),t._v(")")]),t._v(" "),e("td",[e("strong",[t._v("true")])])]),t._v(" "),e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",[t._v("x and y are identical characters")]),t._v(" "),e("td",[e("strong",[t._v("true")])])]),t._v(" "),e("tr",[e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("x and y are both true or both false")]),t._v(" "),e("td",[e("strong",[t._v("true")])])]),t._v(" "),e("tr",[e("td",[t._v("Object")]),t._v(" "),e("td",[t._v("x and y reference same object")]),t._v(" "),e("td",[e("strong",[t._v("true")])])]),t._v(" "),e("tr",[e("td",[t._v("otherwise…")]),t._v(" "),e("td",[e("strong",[t._v("false")])]),t._v(" "),e("td")])])]),t._v(" "),e("h2",{attrs:{id:"common-examples-of-equality-overkill"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#common-examples-of-equality-overkill"}},[t._v("#")]),t._v(" Common Examples of Equality Overkill")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//unnecessary")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" myVar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//better")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" myVar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("..since "),e("code",[t._v("typeOf")]),t._v(" returns a string, this operation will always compare two strings. Therefore == is 100% coercion-proof.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//unnecessary")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" missing "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myVar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" myVar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//better")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" missing "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myVar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n")])])]),e("p",[t._v("…null and undefined are == to themselves and each other.\nNote: because of the (very minor) risk that the "),e("code",[t._v("undefined")]),t._v(" variable might get redefined, equating to null is slightly safer.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//unnecessary")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myArray"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//..}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//better")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myArray"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//..}")]),t._v("\n")])])]),e("p",[t._v("…enough said 😉")])])}),[],!1,null,null,null);s.default=n.exports}}]);