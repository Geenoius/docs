(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{235:function(a,e,t){"use strict";t.r(e);var s=t(4),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"flowcharts-basic-syntax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flowcharts-basic-syntax"}},[a._v("#")]),a._v(" Flowcharts - Basic Syntax")]),a._v(" "),t("h2",{attrs:{id:"graph"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graph"}},[a._v("#")]),a._v(" Graph")]),a._v(" "),t("p",[a._v("This statement declares the direction of the Flowchart.")]),a._v(" "),t("p",[a._v("This declares the graph is oriented from top to bottom ("),t("code",[a._v("TD")]),a._v(" or "),t("code",[a._v("TB")]),a._v(").")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    Start --\x3e Stop\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    Start --\x3e Stop\n")])])]),t("p",[a._v("This declares the graph is oriented from left to right ("),t("code",[a._v("LR")]),a._v(").")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    Start --\x3e Stop\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    Start --\x3e Stop\n")])])]),t("h2",{attrs:{id:"flowchart-orientation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flowchart-orientation"}},[a._v("#")]),a._v(" Flowchart Orientation")]),a._v(" "),t("p",[a._v("Possible FlowChart orientations are:")]),a._v(" "),t("ul",[t("li",[a._v("TB - top to bottom")]),a._v(" "),t("li",[a._v("TD - top-down/ same as top to bottom")]),a._v(" "),t("li",[a._v("BT - bottom to top")]),a._v(" "),t("li",[a._v("RL - right to left")]),a._v(" "),t("li",[a._v("LR - left to right")])]),a._v(" "),t("h2",{attrs:{id:"flowcharts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flowcharts"}},[a._v("#")]),a._v(" Flowcharts")]),a._v(" "),t("p",[a._v("This renders a flowchart that allows for features such as: more arrow types, multi directional arrows, and linking to and from subgraphs.")]),a._v(" "),t("p",[a._v("Apart from the graph type, the syntax is the same. This is currently experimental but when the beta period is over, both the graph and flowchart keywords will render in the new way. This means it is ok to start beta testing flowcharts.")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("Important note")]),a._v(' Do not type the word "end" as a Flowchart node. Capitalize all or any one the letters to keep the flowchart from breaking, i.e, "End" or "END". Or you can apply this '),t("a",{attrs:{href:"https://github.com/mermaid-js/mermaid/issues/1444#issuecomment-639528897",target:"_blank",rel:"noopener noreferrer"}},[a._v("workaround"),t("OutboundLink")],1),a._v(".**")])]),a._v(" "),t("h2",{attrs:{id:"nodes-shapes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nodes-shapes"}},[a._v("#")]),a._v(" Nodes & shapes")]),a._v(" "),t("h3",{attrs:{id:"a-node-default"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-node-default"}},[a._v("#")]),a._v(" A node (default)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id\n")])])]),t("blockquote",[t("p",[t("strong",[a._v("Note")]),a._v(" The id is what is displayed in the box.")])]),a._v(" "),t("h3",{attrs:{id:"a-node-with-text"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-node-with-text"}},[a._v("#")]),a._v(" A node with text")]),a._v(" "),t("p",[a._v("It is also possible to set text in the box that differs from the id. If this is done several times, it is the last text\nfound for the node that will be used. Also if you define edges for the node later on, you can omit text definitions. The\none previously defined will be used when rendering the box.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1[This is the text in the box]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1[This is the text in the box]\n")])])]),t("h2",{attrs:{id:"node-shapes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-shapes"}},[a._v("#")]),a._v(" Node Shapes")]),a._v(" "),t("h3",{attrs:{id:"a-node-with-round-edges"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-node-with-round-edges"}},[a._v("#")]),a._v(" A node with round edges")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1(This is the text in the box)\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1(This is the text in the box)\n")])])]),t("h3",{attrs:{id:"a-stadium-shaped-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-stadium-shaped-node"}},[a._v("#")]),a._v(" A stadium-shaped node")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1([This is the text in the box])\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1([This is the text in the box])\n")])])]),t("h3",{attrs:{id:"a-node-in-a-subroutine-shape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-node-in-a-subroutine-shape"}},[a._v("#")]),a._v(" A node in a subroutine shape")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1[[This is the text in the box]]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1[[This is the text in the box]]\n")])])]),t("h3",{attrs:{id:"a-node-in-a-cylindrical-shape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-node-in-a-cylindrical-shape"}},[a._v("#")]),a._v(" A node in a cylindrical shape")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1[(Database)]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1[(Database)]\n")])])]),t("h3",{attrs:{id:"a-node-in-the-form-of-a-circle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-node-in-the-form-of-a-circle"}},[a._v("#")]),a._v(" A node in the form of a circle")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1((This is the text in the circle))\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1((This is the text in the circle))\n")])])]),t("h3",{attrs:{id:"a-node-in-an-asymetric-shape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-node-in-an-asymetric-shape"}},[a._v("#")]),a._v(" A node in an asymetric shape")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1>This is the text in the box]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1>This is the text in the box]\n")])])]),t("p",[a._v("Currently only the shape above is possible and not its mirror. "),t("em",[a._v("This might change with future releases.")])]),a._v(" "),t("h3",{attrs:{id:"a-node-rhombus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-node-rhombus"}},[a._v("#")]),a._v(" A node (rhombus)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1{This is the text in the box}\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1{This is the text in the box}\n")])])]),t("h3",{attrs:{id:"a-hexagon-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-hexagon-node"}},[a._v("#")]),a._v(" A hexagon node")]),a._v(" "),t("p",[a._v("{% raw %}")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1{{This is the text in the box}}\n")])])]),t("p",[a._v("{% endraw %}")]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("{% raw %}\ngraph LR\n    id1{{This is the text in the box}}\n{% endraw %}\n")])])]),t("h3",{attrs:{id:"parallelogram"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallelogram"}},[a._v("#")]),a._v(" Parallelogram")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    id1[/This is the text in the box/]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    id1[/This is the text in the box/]\n")])])]),t("h3",{attrs:{id:"parallelogram-alt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallelogram-alt"}},[a._v("#")]),a._v(" Parallelogram alt")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    id1[\\This is the text in the box\\]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    id1[\\This is the text in the box\\]\n")])])]),t("h3",{attrs:{id:"trapezoid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trapezoid"}},[a._v("#")]),a._v(" Trapezoid")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    A[/Christmas\\]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    A[/Christmas\\]\n")])])]),t("h3",{attrs:{id:"trapezoid-alt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trapezoid-alt"}},[a._v("#")]),a._v(" Trapezoid alt")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    B[\\Go shopping/]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    B[\\Go shopping/]\n")])])]),t("h2",{attrs:{id:"links-between-nodes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#links-between-nodes"}},[a._v("#")]),a._v(" Links between nodes")]),a._v(" "),t("p",[a._v("Nodes can be connected with links/edges. It is possible to have different types of links or attach a text string to a link.")]),a._v(" "),t("h3",{attrs:{id:"a-link-with-arrow-head"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-link-with-arrow-head"}},[a._v("#")]),a._v(" A link with arrow head")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A--\x3eB\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A--\x3eB\n")])])]),t("h3",{attrs:{id:"an-open-link"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#an-open-link"}},[a._v("#")]),a._v(" An open link")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A --- B\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A --- B\n")])])]),t("h3",{attrs:{id:"text-on-links"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#text-on-links"}},[a._v("#")]),a._v(" Text on links")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A-- This is the text! ---B\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A-- This is the text ---B\n")])])]),t("p",[a._v("or")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A---|This is the text|B\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A---|This is the text|B\n")])])]),t("h3",{attrs:{id:"a-link-with-arrow-head-and-text"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-link-with-arrow-head-and-text"}},[a._v("#")]),a._v(" A link with arrow head and text")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A--\x3e|text|B\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A--\x3e|text|B\n")])])]),t("p",[a._v("or")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A-- text --\x3eB\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A-- text --\x3eB\n")])])]),t("h3",{attrs:{id:"dotted-link"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dotted-link"}},[a._v("#")]),a._v(" Dotted link")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR;\n   A-.->B;\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR;\n   A-.->B;\n")])])]),t("h3",{attrs:{id:"dotted-link-with-text"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dotted-link-with-text"}},[a._v("#")]),a._v(" Dotted link with text")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   A-. text .-> B\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   A-. text .-> B\n")])])]),t("h3",{attrs:{id:"thick-link"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#thick-link"}},[a._v("#")]),a._v(" Thick link")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   A ==> B\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   A ==> B\n")])])]),t("h3",{attrs:{id:"thick-link-with-text"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#thick-link-with-text"}},[a._v("#")]),a._v(" Thick link with text")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   A == text ==> B\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   A == text ==> B\n")])])]),t("h3",{attrs:{id:"chaining-of-links"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chaining-of-links"}},[a._v("#")]),a._v(" Chaining of links")]),a._v(" "),t("p",[a._v("It is possible declare many links in the same line as per below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   A -- text --\x3e B -- text2 --\x3e C\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   A -- text --\x3e B -- text2 --\x3e C\n")])])]),t("p",[a._v("It is also possible to declare multiple nodes links in the same line as per below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   a --\x3e b & c--\x3e d\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n   a --\x3e b & c--\x3e d\n")])])]),t("p",[a._v("You can then describe dependencies in a very expressive way. Like the onliner below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TB\n    A & B--\x3e C & D\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TB\n    A & B--\x3e C & D\n")])])]),t("p",[a._v("If you describe the same diagram using the the basic syntax, it will take four lines. A\nword of warning, one could go overboard with this making the graph harder to read in\nmarkdown form. The Swedish word "),t("code",[a._v("lagom")]),a._v(" comes to mind. It means, not to much and not to little.\nThis goes for expressive syntaxes as well.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TB\n    A --\x3e C\n    A --\x3e D\n    B --\x3e C\n    B --\x3e D\n")])])]),t("h3",{attrs:{id:"beta-new-arrow-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beta-new-arrow-types"}},[a._v("#")]),a._v(" Beta: New arrow types")]),a._v(" "),t("p",[a._v("When using flowchart instead of graph there is the are new types of arrows supported as per below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flowchart LR\n    A --o B\n    B --x C\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flowchart LR\n    A --o B\n    B --x C\n")])])]),t("h3",{attrs:{id:"beta-multi-directional-arrows"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beta-multi-directional-arrows"}},[a._v("#")]),a._v(" Beta: Multi directional arrows")]),a._v(" "),t("p",[a._v("When using flowchart instead of graph there is the possibility to use multidirectional arrows.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flowchart LR\n    A o--o B\n    B <--\x3e C\n    C x--x D\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flowchart LR\n    A o--o B\n    B <--\x3e C\n    C x--x D\n")])])]),t("h3",{attrs:{id:"minimum-length-of-a-link"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minimum-length-of-a-link"}},[a._v("#")]),a._v(" Minimum length of a link")]),a._v(" "),t("p",[a._v("Each node in the flowchart is ultimately assigned to a rank in the rendered\ngraph, i.e. to a vertical or horizontal level (depending on the flowchart\norientation), based on the nodes to which it is linked. By default, links\ncan span any number of ranks, but you can ask for any link to be longer\nthan the others by adding extra dashes in the link definition.")]),a._v(" "),t("p",[a._v("In the following example, two extra dashes are added in the link from node "),t("em",[a._v("B")]),a._v("\nto node "),t("em",[a._v("E")]),a._v(", so that it spans two more ranks than regular links:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    A[Start] --\x3e B{Is it?};\n    B --\x3e|Yes| C[OK];\n    C --\x3e D[Rethink];\n    D --\x3e B;\n    B ----\x3e|No| E[End];\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    A[Start] --\x3e B{Is it?};\n    B --\x3e|Yes| C[OK];\n    C --\x3e D[Rethink];\n    D --\x3e B;\n    B ----\x3e|No| E[End];\n")])])]),t("blockquote",[t("p",[t("strong",[a._v("Note")]),a._v(" Links may still be made longer than the requested number of ranks\nby the rendering engine to accommodate other requests.")])]),a._v(" "),t("p",[a._v("When the link label is written in the middle of the link, the extra dashes must\nbe added on the right side of the link. The following example is equivalent to\nthe previous one:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    A[Start] --\x3e B{Is it?};\n    B -- Yes --\x3e C[OK];\n    C --\x3e D[Rethink];\n    D --\x3e B;\n    B -- No ----\x3e E[End];\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TD\n    A[Start] --\x3e B{Is it?};\n    B --\x3e|Yes| C[OK];\n    C --\x3e D[Rethink];\n    D --\x3e B;\n    B ----\x3e|No| E[End];\n")])])]),t("p",[a._v("For dotted or thick links, the characters to add are equals signs or dots,\nas summed up in the following table:")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("Length")]),a._v(" "),t("th",{staticStyle:{"text-align":"center"}},[a._v("1")]),a._v(" "),t("th",{staticStyle:{"text-align":"center"}},[a._v("2")]),a._v(" "),t("th",{staticStyle:{"text-align":"center"}},[a._v("3")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("Normal")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("---")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("----")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("-----")])])]),a._v(" "),t("tr",[t("td",[a._v("Normal with arrow")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("--\x3e")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("---\x3e")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("----\x3e")])])]),a._v(" "),t("tr",[t("td",[a._v("Thick")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("===")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("====")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("=====")])])]),a._v(" "),t("tr",[t("td",[a._v("Thick with arrow")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("==>")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("===>")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("====>")])])]),a._v(" "),t("tr",[t("td",[a._v("Dotted")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("-.-")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("-..-")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("-...-")])])]),a._v(" "),t("tr",[t("td",[a._v("Dotted with arrow")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("-.->")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("-..->")])]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("code",[a._v("-...->")])])])])]),a._v(" "),t("h2",{attrs:{id:"special-characters-that-break-syntax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#special-characters-that-break-syntax"}},[a._v("#")]),a._v(" Special characters that break syntax")]),a._v(" "),t("p",[a._v("It is possible to put text within quotes in order to render more troublesome characters. As in the example below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('graph LR\n    id1["This is the (text) in the box"]\n')])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('graph LR\n    id1["This is the (text) in the box"]\n')])])]),t("h3",{attrs:{id:"entity-codes-to-escape-characters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entity-codes-to-escape-characters"}},[a._v("#")]),a._v(" Entity codes to escape characters")]),a._v(" "),t("p",[a._v("It is possible to escape characters using the syntax examplified here.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('    graph LR\n        A["A double quote:#quot;"] --\x3eB["A dec char:#9829;"]\n')])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('    graph LR\n        A["A double quote:#quot;"] --\x3eB["A dec char:#9829;"]\n')])])]),t("h2",{attrs:{id:"subgraphs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subgraphs"}},[a._v("#")]),a._v(" Subgraphs")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("subgraph title\n    graph definition\nend\n")])])]),t("p",[a._v("An example below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TB\n    c1--\x3ea2\n    subgraph one\n    a1--\x3ea2\n    end\n    subgraph two\n    b1--\x3eb2\n    end\n    subgraph three\n    c1--\x3ec2\n    end\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TB\n    c1--\x3ea2\n    subgraph one\n    a1--\x3ea2\n    end\n    subgraph two\n    b1--\x3eb2\n    end\n    subgraph three\n    c1--\x3ec2\n    end\n")])])]),t("p",[a._v("You can also set an excplicit id for the subgraph.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TB\n    c1--\x3ea2\n    subgraph ide1 [one]\n    a1--\x3ea2\n    end\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph TB\n    c1--\x3ea2\n    subgraph id1 [one]\n    a1--\x3ea2\n    end\n")])])]),t("h2",{attrs:{id:"beta-flowcharts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beta-flowcharts"}},[a._v("#")]),a._v(" Beta: flowcharts")]),a._v(" "),t("p",[a._v("With the graphtype flowcharts it is also possible to set edges to and from subgraphs as in the graph below.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flowchart TB\n    c1--\x3ea2\n    subgraph one\n    a1--\x3ea2\n    end\n    subgraph two\n    b1--\x3eb2\n    end\n    subgraph three\n    c1--\x3ec2\n    end\n    one --\x3e two\n    three --\x3e two\n    two --\x3e c2\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flowchart TB\n    c1--\x3ea2\n    subgraph one\n    a1--\x3ea2\n    end\n    subgraph two\n    b1--\x3eb2\n    end\n    subgraph three\n    c1--\x3ec2\n    end\n    one --\x3e two\n    three --\x3e two\n    two --\x3e c2\n")])])]),t("h2",{attrs:{id:"interaction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interaction"}},[a._v("#")]),a._v(" Interaction")]),a._v(" "),t("p",[a._v("It is possible to bind a click event to a node, the click can lead to either a javascript callback or to a link which will be opened in a new browser tab. "),t("strong",[a._v("Note")]),a._v(": This functionality is disabled when using "),t("code",[a._v("securityLevel='strict'")]),a._v(" and enabled when using "),t("code",[a._v("securityLevel='loose'")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("click nodeId callback\n")])])]),t("ul",[t("li",[a._v("nodeId is the id of the node")]),a._v(" "),t("li",[a._v("callback is the name of a javascript function defined on the page displaying the graph, the function will be called with the nodeId as parameter.")])]),a._v(" "),t("p",[a._v("Examples of tooltip usage below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<script>\n  var callback = function(){\n      alert('A callback was triggered');\n  }\n<\/script>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('graph LR;\n    A--\x3eB;\n    click A callback "Tooltip for a callback"\n    click B "http://www.github.com" "This is a tooltip for a link"\n')])])]),t("p",[a._v("The tooltip text is surrounded in double quotes. The styles of the tooltip are set by the class .mermaidTooltip.")]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('graph LR\n    A--\x3eB;\n    click A callback "Tooltip"\n    click B "http://www.github.com" "This is a link"\n')])])]),t("blockquote",[t("p",[t("strong",[a._v("Success")]),a._v(" The tooltip functionality and the ability to link to urls are available from version 0.5.2.")])]),a._v(" "),t("p",[a._v("?> Due to limitations with how Docsify handles JavaScript callback functions, an alternate working demo for the above code can be viewed at "),t("a",{attrs:{href:"https://jsfiddle.net/s37cjoau/3/",target:"_blank",rel:"noopener noreferrer"}},[a._v("this jsfiddle"),t("OutboundLink")],1),a._v(".")]),a._v(" "),t("p",[a._v("Links are opened in the same browser tab/window by default. It is possible to change this by adding a link target to the click definition ("),t("code",[a._v("_self")]),a._v(", "),t("code",[a._v("_blank")]),a._v(", "),t("code",[a._v("_parent")]),a._v(" and "),t("code",[a._v("_top")]),a._v(" are supported):")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('graph LR;\n    A--\x3eB;\n    B--\x3eC;\n    click A "http://www.github.com" _blank\n    click B "http://www.github.com" "Open this in a new tab" _blank\n')])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('graph LR;\n    A--\x3eB;\n    B--\x3eC;\n    click A "http://www.github.com" _blank\n    click B "http://www.github.com" "Open this in a new tab" _blank\n')])])]),t("p",[a._v("Beginners tip, a full example using interactive links in a html context:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<body>\n  <div class="mermaid">\n    graph LR;\n        A--\x3eB;\n        click A callback "Tooltip"\n        click B "http://www.github.com" "This is a link"\n  </div>\n\n  <script>\n    var callback = function(){\n        alert(\'A callback was triggered\');\n    }\n    var config = {\n        startOnLoad:true,\n        flowchart:{\n            useMaxWidth:true,\n            htmlLabels:true,\n            curve:\'cardinal\',\n        },\n        securityLevel:\'loose\',\n    };\n\n    mermaid.initialize(config);\n  <\/script>\n</body>\n')])])]),t("h3",{attrs:{id:"comments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[a._v("#")]),a._v(" Comments")]),a._v(" "),t("p",[a._v("Comments can be entered within a flow diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with "),t("code",[a._v("%%")]),a._v(" (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any flow syntax")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n%% this is a comment A -- text --\x3e B{node}\n   A -- text --\x3e B -- text2 --\x3e C\n")])])]),t("h2",{attrs:{id:"styling-and-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#styling-and-classes"}},[a._v("#")]),a._v(" Styling and classes")]),a._v(" "),t("h3",{attrs:{id:"styling-links"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#styling-links"}},[a._v("#")]),a._v(" Styling links")]),a._v(" "),t("p",[a._v("It is possible to style links. For instance you might want to style a link that is going backwards in the flow. As links\nhave no ids in the same way as nodes, some other way of deciding what style the links should be attached to is required.\nInstead of ids, the order number of when the link was defined in the graph is used. In the example below the style\ndefined in the linkStyle statement will belong to the fourth link in the graph:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("linkStyle 3 stroke:#ff3,stroke-width:4px,color:red;\n")])])]),t("h3",{attrs:{id:"styling-a-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#styling-a-node"}},[a._v("#")]),a._v(" Styling a node")]),a._v(" "),t("p",[a._v("It is possible to apply specific styles such as a thicker border or a different background color to a node.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1(Start)--\x3eid2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    id1(Start)--\x3eid2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n")])])]),t("h4",{attrs:{id:"classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#classes"}},[a._v("#")]),a._v(" Classes")]),a._v(" "),t("p",[a._v("More convenient then defining the style every time is to define a class of styles and attach this class to the nodes that\nshould have a different look.")]),a._v(" "),t("p",[a._v("a class definition looks like the example below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    classDef className fill:#f9f,stroke:#333,stroke-width:4px;\n")])])]),t("p",[a._v("Attachment of a class to a node is done as per below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    class nodeId1 className;\n")])])]),t("p",[a._v("It is also possible to attach a class to a list of nodes in one statement:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    class nodeId1,nodeId2 className;\n")])])]),t("p",[a._v("A shorter form of adding a class is to attach the classname to the node using the "),t("code",[a._v(":::")]),a._v("operator as per below:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A:::someclass --\x3e B\n    classDef someclass fill:#f96;\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A:::someclass --\x3e B\n    classDef someclass fill:#f96;\n")])])]),t("h3",{attrs:{id:"css-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-classes"}},[a._v("#")]),a._v(" Css classes")]),a._v(" "),t("p",[a._v("It is also possible to predefine classes in css styles that can be applied from the graph definition as in the example\nbelow:")]),a._v(" "),t("p",[t("strong",[a._v("Example style")])]),a._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("style")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token style"}},[t("span",{pre:!0,attrs:{class:"token language-css"}},[a._v("\n  "),t("span",{pre:!0,attrs:{class:"token selector"}},[a._v(".cssClass > rect")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v("fill")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" #ff0000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v("stroke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" #ffff00"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v("stroke-width")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 4px"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("style")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[t("strong",[a._v("Example definition")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR;\n    A--\x3eB[AAA<span>BBB</span>];\n    B--\x3eD;\n    class A cssClass;\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR;\n    A--\x3eB[AAA<span>BBB</span>];\n    B--\x3eD;\n    class A cssClass;\n")])])]),t("h3",{attrs:{id:"default-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#default-class"}},[a._v("#")]),a._v(" Default class")]),a._v(" "),t("p",[a._v("If a class is named default it will be assigned to all classes without specific class definitions.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    classDef default fill:#f9f,stroke:#333,stroke-width:4px;\n")])])]),t("h2",{attrs:{id:"basic-support-for-fontawesome"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basic-support-for-fontawesome"}},[a._v("#")]),a._v(" Basic support for fontawesome")]),a._v(" "),t("p",[a._v("It is possible to add icons from fontawesome.")]),a._v(" "),t("p",[a._v("The icons are acessed via the syntax fa:#icon class name#.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('graph TD\n    B["fa:fa-twitter for peace"]\n    B--\x3eC[fa:fa-ban forbidden]\n    B--\x3eD(fa:fa-spinner);\n    B--\x3eE(A fa:fa-camera-retro perhaps?);\n')])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('graph TD\n    B["fa:fa-twitter for peace"]\n    B--\x3eC[fa:fa-ban forbidden]\n    B--\x3eD(fa:fa-spinner);\n    B--\x3eE(A fa:fa-camera-retro perhaps?);\n')])])]),t("h2",{attrs:{id:"graph-declarations-with-spaces-between-vertices-and-link-and-without-semicolon"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graph-declarations-with-spaces-between-vertices-and-link-and-without-semicolon"}},[a._v("#")]),a._v(" Graph declarations with spaces between vertices and link and without semicolon")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("In graph declarations, the statements also can now end without a semicolon. After release 0.2.16, ending a graph statement with semicolon is just optional. So the below graph declaration is also valid along with the old declarations of the graph.")])]),a._v(" "),t("li",[t("p",[a._v("A single space is allowed between vertices and the link. However there should not be any space between a vertex and its text and a link and its text. The old syntax of graph declaration will also work and hence this new feature is optional and is introduce to improve readability.")])])]),a._v(" "),t("p",[a._v("Below is the new declaration of the graph edges which is also valid along with the old declaration of the graph edges.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A[Hard edge] --\x3e|Link text| B(Round edge)\n    B --\x3e C{Decision}\n    C --\x3e|One| D[Result one]\n    C --\x3e|Two| E[Result two]\n")])])]),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("graph LR\n    A[Hard edge] --\x3e|Link text| B(Round edge)\n    B --\x3e C{Decision}\n    C --\x3e|One| D[Result one]\n    C --\x3e|Two| E[Result two]\n")])])]),t("h2",{attrs:{id:"configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[a._v("#")]),a._v(" Configuration...")]),a._v(" "),t("p",[a._v("Is it possible to adjust the width of the rendered flowchart.")]),a._v(" "),t("p",[a._v("This is done by defining "),t("strong",[a._v("mermaid.flowchartConfig")]),a._v(" or by the CLI to use a json file with the configuration. How to use\nthe CLI is described in the mermaidCLI page.\nmermaid.flowchartConfig can be set to a JSON string with config parameters or the corresponding object.")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[a._v("mermaid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("flowchartConfig "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    width"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);